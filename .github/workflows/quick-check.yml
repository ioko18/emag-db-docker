name: Quick Check

on:
  push:
    branches: ["**"]
  pull_request:

concurrency:
  group: quick-check-${{ github.ref }}
  cancel-in-progress: true

jobs:
  qc:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # dacă folosești un .env dedicat CI-ului
      - name: Prepare .env for CI
        run: |
          if [ -f .env.ci ]; then cp .env.ci .env; fi

      # Buildx + cache GitHub Actions (înlocuiește "compose build")
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build app image (runtime) with cache
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          target: runtime
          tags: emagdb-app:latest          # trebuie să corespundă cu 'image:' din docker-compose.yml
          load: true                       # încarcă imaginea în daemon-ul local, pentru compose
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_UID=10001
            APP_GID=10001

      # pornește serviciile fără rebuild (folosește imaginea deja construită)
      - name: Start compose (no build)
        run: |
          docker compose up -d --no-build --force-recreate
          docker compose ps

      - name: Quick check (make ci)
        run: make ci

      - name: Dump logs on failure
        if: failure()
        run: |
          docker compose ps || true
          docker compose logs --no-color > compose.log || true
          echo "---- last 200 lines of logs ----"
          tail -n 200 compose.log || true

      - name: Teardown
        if: always()
        run: docker compose down -v --remove-orphans

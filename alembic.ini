# Alembic config pentru proiect

[alembic]
# unde sunt scripturile de migrație
script_location = %(here)s/migrations

# asigură importul pachetelor din proiect (app/*)
prepend_sys_path = .

# prefixează fișierele de revizie cu data (ordine clară în PR-uri)
file_template = %%(year)d_%%(month).2d_%%(day).2d-%%(rev)s_%%(slug)s

# limitează lungimea slug-ului (evită nume de fișiere foarte lungi)
truncate_slug_length = 40

# separarea căilor depinde de OS
path_separator = os

# timestamp-urile din fișierele de migrație în UTC
timezone = UTC

# rulează env.py și la comanda "revision" (nu doar la "upgrade/downgrade")
revision_environment = true

# encoding pentru fișierele generate
output_encoding = utf-8

# URL-ul DB – lăsat gol intenționat; îl citește env.py din variabila de mediu DATABASE_URL
# Dacă vrei un fallback local, decomentează și setează:
# sqlalchemy.url = postgresql+psycopg2://appuser:appsecret@127.0.0.1:5434/appdb
sqlalchemy.url =

[post_write_hooks]
# Formatare automată cu black pentru fișierele nou generate (dacă black e instalat)
hooks = black
black.type = console_scripts
black.entrypoint = black
black.options = -l 100 REVISION_SCRIPT_FILENAME

# (Opțional) Activează și ruff auto-fix dacă îl folosești.
# hooks = black,ruff
# ruff.type = console_scripts
# ruff.entrypoint = ruff
# ruff.options = --fix --exit-zero REVISION_SCRIPT_FILENAME

# -------------------------
# Logging
# -------------------------
[loggers]
keys = root, sqlalchemy, alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console

# Schimbă în INFO dacă vrei să vezi SQL-urile efective.
[logger_sqlalchemy]
level = WARNING
handlers =
qualname = sqlalchemy.engine
propagate = 1

[logger_alembic]
level = INFO
handlers = console
qualname = alembic
propagate = 0

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
